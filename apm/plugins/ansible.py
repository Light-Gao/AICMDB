"""Plugin for Ansible
This plugin could return callable object which should have two main functions:
 .. 1. generate command based on input arguments;
 .. 2. execute command generated by 1);
To fulfill functionality above, 3rd plugin module must implement
functions below:
 .. 1. get_executor(name, *args, **kwargs) --> return with callable object which include two functions above
 .. 2. init_executor(name, *args, **kwargs) --> supply an entry point to initial executor after creative action

Version 0.1: execute command[ansible-playbook] on remote host directly
Version 0.2: encapsulating ansible API
"""


from paramiko import SSHClient, AutoAddPolicy
from logging import getLogger
from uuid import uuid1

#initial logger
logger = getLogger('Celery')

#Function: create executor
def get_executor(name=None, *args, **kwargs):
    if name is None:
        name = uuid1()
    logger.info('Plugin -- The current executor is: [%s].' % name)
    return AnsibleExecutor(name, *args, **kwargs)

#class: AnsibleExecutor
class AnsibleExecutor:
    #essential properties

    #__init__
    def __init__(self, name, *args, **kwargs):
        #maybe defined by outer module or uuid1()
        self.__executor_name__ = name
        #could be redefined by other implements
        self.__api_version__ = 0.1
        #default is 'simple', could be extended by followers
        self._exec_mode = 'simple'
        self._executive = None
        self._gen_executive(*args, **kwargs)

    #initial executor after creative action
    def init_executor(self, *args, **kwargs):
        self._gen_executive(*args, **kwargs)

    #function: generate executive(s)
    # .. param: args, type: dict
    def _gen_executive(self, *args, **kwargs):
        """Definition"""
        if args is None and kwargs is None:
            logger.error('No input parameter for Ansible plugin...')
            return False
        else:
            logger.info('Starting to generate executive(s)...')
            logger.info('Ansible deployment for zookeeper cluster, '
                         'nodes [{0}], port [{1}].'.format(kwargs['nodes'], kwargs['port']))
            self._executive = 'ansible-playbook site.yml ' \
                              '-e "zk_install_dir=/opt/testzk zk_client_port={0}"'.format(kwargs['port'])
            return True


    #function: execute -- to execute command(s) generated above
    def execute(self, exec_mode=None):
        """Definition"""
        if exec_mode is None:
            exec_mode = self._exec_mode

        logger.debug('Starting to execute...')
        logger.info('Execute mode is [%s]...' % exec_mode)

        #execute
        logger.info('Plugin -- executive is [%s].' % self._executive)

        #conn = get_ssh_conn(host='10.10.100.22', port=22, user='root', passwd='docker01')
        #stdin, stdout, stderr = conn.exec_command(executive)
        #logger.info(stdout.read().decode())
        #logger.info(stderr.read().decode())
        logger.info('Deployment finished!')
        return True

    #function: get SSHClient instance
    def get_ssh_conn(**kwargs):
        conn = None
        if kwargs is None:
            logger.error('Error, no essential input[host|port|user|passwd] for connection generation...')
        else:
            conn = SSHClient()
            conn.set_missing_host_key_policy(AutoAddPolicy())
            conn.connect(hostname=kwargs['host'], port=kwargs['port'],
                         username=kwargs['user'], password=kwargs['passwd'])
        return conn


if __name__ == '__main__':
    get_executor()
