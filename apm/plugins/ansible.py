"""Plugin for Ansible
This plugin defines two main functions:
 .. 1. generate command based on input args;
 .. 2. execute command generated by 1);
To fulfill functionality above, 3rd plugin module must implement
functions below:
 .. 1. gen_executive(*args, **kwargs);
 .. 2. execute(*args, **kwargs);

Version 0.1: execute command[ansible-playbook] on remote host directly
Version 0.2: encapsulating ansible API
"""



from paramiko import SSHClient, AutoAddPolicy
from logging import getLogger

#initial logger
logger = getLogger('Celery')

#Function: generate executive(s)
# .. param: args, type: dict
def gen_executive(*args, **kwargs):
    """Definition"""
    if args is None and kwargs is None:
        return False
    else:
        logger.info('Starting to generate executive(s)...')
        logger.info('Ansible deployment for zookeeper cluster, '
                     'nodes [{0}], port [{1}].'.format(kwargs['nodes'], kwargs['port']))
        return 'ansible-playbook site.yml ' \
               '-e "zk_install_dir=/opt/testzk zk_client_port={0}"'.format(kwargs['port'])


#Function: execute -- to execute command(s) generated above
def execute(executive):
    """Definition"""
    logger.info('Starting to execute [%s]...' % executive)
    conn = get_ssh_conn(host='10.10.100.22', port=22, user='root', passwd='docker01')
    stdin, stdout, stderr = conn.exec_command(executive)
    logger.info(stdout.read().decode())
    logger.info(stderr.read().decode())
    logger.info('Deployment finished!')
    return True

#Function: get SSHClient instance
def get_ssh_conn(**kwargs):
    conn = None
    if kwargs is None:
        logger.error('Error, no essential input[host|port|user|passwd] for connection generation...')
    else:
        conn = SSHClient()
        conn.set_missing_host_key_policy(AutoAddPolicy())
        conn.connect(hostname=kwargs['host'], port=kwargs['port'],
                     username=kwargs['user'], password=kwargs['passwd'])
    return conn
